name: CI
on:
  pull_request:
    branches: ['**']
  push:
    branches: ['**']
    tags: [v*]
jobs:
  ci:
    # Run on external PRs, but not on internal PRs since those will be run by push to branch
    # For JVM 3 GB is the lowest value we can set without causing failures in tests
    # For JS tests 2.5 GB is the lowest value we can set without causing failures in tests
    # For Native we probably can lower the value further
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        target-platform: [ "JVM", "JS", "Native" ]
    steps:
    - name: Set Java Opts for JS
      if: matrix.target-platform == 'JS'
      env:
        JAVA_OPTS: "-Xmx2500M -Dsbt.task.timings=true" # -Xlog:gc -XX:+PrintGCDetails -Xlog:gc*::time
      run: |
        echo ${{env.JAVA_OPTS}}
    - name: Set Java Opts for JVM
      if: matrix.target-platform == 'JVM'
      env:
        JAVA_OPTS: "-Xmx3000M -Dsbt.task.timings=true" # -Xlog:gc -XX:+PrintGCDetails -Xlog:gc*::time
      run: |
        echo ${{env.JAVA_OPTS}}
    - name: Set Java Opts for Native
      if: matrix.target-platform == 'Native'
      env:
        JAVA_OPTS: "-Xmx3500M -Dsbt.task.timings=true" # -Xlog:gc -XX:+PrintGCDetails -Xlog:gc*::time
      run: |
        echo ${{env.JAVA_OPTS}}
    - name: Checkout
      uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Cache sbt
      uses: actions/cache@v2
      with:
        path: |
          ~/.sbt
          ~/.ivy2/cache
          ~/.coursier
        key: sbt-cache-${{ runner.os }}-${{ matrix.target-platform }}-${{ hashFiles('project/build.properties') }}
    - name: Install libidn11-dev libcurl3-dev
      if: matrix.target-platform == 'Native'
      run: |
        sudo apt-get update
        sudo apt-get install libidn11-dev libcurl3-dev
        echo "STTP_NATIVE=1" >> $GITHUB_ENV
    - name: Compile
      run: sbt -v compile compileDocs
    - name: Test
      run: sbt -v test${{ matrix.target-platform }}
    - name: Prepare release notes
      uses: release-drafter/release-drafter@v5
      with:
        config-name: release-drafter.yml
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Cleanup
      run: |
        rm -rf "$HOME/.ivy2/local" || true
        find $HOME/.ivy2/cache                       -name "ivydata-*.properties" -delete || true
        find $HOME/.ivy2/cache                       -name "*-LM-SNAPSHOT*"       -delete || true
        find $HOME/.cache/coursier/v1                -name "ivydata-*.properties" -delete || true
        find $HOME/.sbt                              -name "*.lock"               -delete || true

  mima:
    # run on external PRs, but not on internal PRs since those will be run by push to branch
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository
    runs-on: ubuntu-20.04
    env:
      JAVA_OPTS: "-Xmx3500M"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # checkout tags so that dynver works properly (we need the version for MiMa)
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache sbt
        uses: actions/cache@v2
        with:
          path: |
            ~/.sbt
            ~/.ivy2/cache
            ~/.coursier
          key: sbt-cache-${{ runner.os }}-JVM-${{ hashFiles('project/build.properties') }}
      - name: Check MiMa # disable for major releases
        run: sbt -v mimaReportBinaryIssues
      - name: Cleanup
        run: |
          rm -rf "$HOME/.ivy2/local" || true
          find $HOME/.ivy2/cache                       -name "ivydata-*.properties" -delete || true
          find $HOME/.ivy2/cache                       -name "*-LM-SNAPSHOT*"       -delete || true
          find $HOME/.cache/coursier/v1                -name "ivydata-*.properties" -delete || true
          find $HOME/.sbt                              -name "*.lock"               -delete || true

  publish:
    name: Publish release
    needs: [ci]
    if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-20.04
    env:
      STTP_NATIVE: 1
      JAVA_OPTS: "-Xmx3500M -Dsbt.task.timings=true"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache sbt
        uses: actions/cache@v2
        with:
          path: |
            ~/.sbt
            ~/.ivy2/cache
            ~/.coursier
          key: sbt-cache-release-${{ runner.os }}-${{ hashFiles('project/build.properties') }}
      - name: Install libidn11-dev libcurl3-dev
        run: |
          sudo apt-get update
          sudo apt-get install libidn11-dev libcurl3-dev
      - name: Compile
        run: sbt compile
      - name: Publish artifacts
        run: sbt ci-release
        env:
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
      - name: Extract version from commit message
        run: |
          version=${GITHUB_REF/refs\/tags\/v/}
          echo "VERSION=$version" >> $GITHUB_ENV
        env:
          COMMIT_MSG: ${{ github.event.head_commit.message }}
      - name: Publish release notes
        uses: release-drafter/release-drafter@v5
        with:
          config-name: release-drafter.yml
          publish: true
          name: "v${{ env.VERSION }}"
          tag: "v${{ env.VERSION }}"
          version: "v${{ env.VERSION }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Cleanup
        run: |
          rm -rf "$HOME/.ivy2/local" || true
          find $HOME/.ivy2/cache                       -name "ivydata-*.properties" -delete || true
          find $HOME/.ivy2/cache                       -name "*-LM-SNAPSHOT*"       -delete || true
          find $HOME/.cache/coursier/v1                -name "ivydata-*.properties" -delete || true
          find $HOME/.sbt                              -name "*.lock"               -delete || true
